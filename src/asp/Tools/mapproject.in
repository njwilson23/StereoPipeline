#!/usr/bin/env python
# -*- coding: utf-8 -*-
# __BEGIN_LICENSE__
#  Copyright (c) 2009-2013, United States Government as represented by the
#  Administrator of the National Aeronautics and Space Administration. All
#  rights reserved.
#
#  The NGT platform is licensed under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance with the
#  License. You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# __END_LICENSE__

'''
This tool implements a multi-process version of mapproject to
greatly increase the speed of map projecting ISIS images.
'''

import sys
import os, glob, re, shutil, subprocess, string, time, errno, optparse, math

if sys.version_info < (2, 6, 0):
    print('\nERROR: Must use Python 2.6 or greater.')
    sys.exit(1)

# The path to the ASP python files
basepath    = os.path.abspath(sys.path[0])
pythonpath  = os.path.abspath(basepath + '/../Python')  # for dev ASP
libexecpath = os.path.abspath(basepath + '/../libexec') # for packaged ASP
sys.path.insert(0, basepath) # prepend to Python path
sys.path.insert(0, pythonpath)
sys.path.insert(0, libexecpath)

import asp_file_utils, asp_system_utils, asp_cmd_utils, asp_image_utils

# Prepend to system PATH
os.environ["PATH"] = libexecpath + os.pathsep + os.environ["PATH"]

def generateTileName(startX, startY, stopX, stopY):
    """Generate the name of a tile based on its location"""

    tileString = 'tile_' + str(startX) + '_' + str(startY) + '_' + str(stopX) + '_' + str(stopY) + '_.tif'
    return tileString


def generateTileList(fullWidth, fullHeight, tileSize):
    """Generate a full list of tiles for this image"""

    numTilesX = int(math.ceil(fullWidth  / float(tileSize)))
    numTilesY = int(math.ceil(fullHeight / float(tileSize)))

    tileList = []
    for r in range(0, numTilesY):
        for c in range(0, numTilesX):

            # Starting pixel positions for the tile
            tileStartY = r * tileSize
            tileStartX = c * tileSize

            # Determine the size of this tile
            thisWidth  = tileSize
            thisHeight = tileSize
            if (r == numTilesY-1): # If the last row
                thisHeight = fullHeight - tileStartY # Height is last remaining pixels
            if (c == numTilesX-1): # If the last col
                thisWidth  = fullWidth  - tileStartX # Width is last remaining pixels

            # Get the end pixels for this tile
            tileStopY  = tileStartY + thisHeight # Stop values are exclusive
            tileStopX  = tileStartX + thisWidth

            # Create a name for this tile
            # - Tile format is tile_col_row_width_height_.tif
            tileString = generateTileName(tileStartX, tileStartY, tileStopX, tileStopY)

            tileList.append((tileStartX, tileStartY, tileStopX, tileStopY, tileString))

    return (numTilesX, numTilesY, tileList)

def handleArguments(args):
    """Split up arguments into required and optional lists which will be passed to subprocess"""

    requiredList = []
    optionsList  = []

    # Loop through all entries.
    iterable = iter(range(0, len(args)))
    for i in iterable:
        a = args[i]
        if (i < len(args)-1): # Don't load the next value when we are at the end!
            n = args[i+1]
        else:
            n = '-' # This will just cause us to get out of the loop

        if asp_cmd_utils.isCmdOption(a):      # This is the start of an option.
            optionsList.append(a)  # Record this entry.

            if asp_cmd_utils.isCmdOption(n):  # The next entry is the start of another option so this one has no values.
                continue

            optionsList.append(n)  # Otherwise record the next entry as a value.
            iterable.next()              # Skip the next entry in the loop.

            if (a == '--t_projwin') or (a == '--t_pixelwin'):  # These arguments have four values, not just one.
                optionsList.append(args[i+2])              # Add the additional three arguments and skip them in the loop.
                optionsList.append(args[i+3])
                optionsList.append(args[i+4])
                iterable.next()
                iterable.next()
                iterable.next()

        else: # This is one of the three positional arguments
            requiredList.append(a)

    # Return the two lists
    return (requiredList, optionsList)

def writeSingleTile(options):
    """Writes a single tile according to the options"""

    # Determine the name of the tile we need to write
    tileName = generateTileName(options.pixelStartX, options.pixelStartY, options.pixelStopX, options.pixelStopY)
    tilePath = os.path.join(options.workDir, tileName)

    # Bounds for this tile
    startX = int(options.pixelStartX)
    stopX  = int(options.pixelStopX)
    startY = int(options.pixelStartY)
    stopY  = int(options.pixelStopY)

    # If the user passed in the t_pixelwin argument, reconcile it with the internal ROI we need.
    extraArgs = []
    i = 0
    while i < len(options.extraArgs):
        arg = options.extraArgs[i]

        if arg == '--t_pixelwin':
            # Skip this element and grab the user provided pixel bounds
            userStartX = int(options.extraArgs[i+1])
            userStopX  = int(options.extraArgs[i+2])
            userStartY = int(options.extraArgs[i+3])
            userStopY  = int(options.extraArgs[i+4])

            # Reconcile the bounding box
            if (startX < userStartX): startX = userStartX
            if (stopX  > userStopX ): stopX  = userStopX
            if (startY < userStartY): startY = userStartY
            if (stopY  > userStopY ): stopY  = userStopY

            # If there is no tile left to generate then we can just return here
            if ((startX > stopX) or (startY > stopY)):
                return 0
            i += 5
        else:
            extraArgs.append(arg)
            i += 1

    # Just call the command for a single tile!
    cmd = ['mapproject_single',  '--t_pixelwin', str(startX), str(startY), str(stopX), str(stopY),
                               options.demPath, options.imagePath, options.cameraPath, tilePath]
    cmd = cmd + extraArgs # Append other options
    asp_cmd_utils.executeCommand(cmd, suppressOutput=options.suppressOutput)

    if options.convertTiles: # Make uint8 version of the tile for debugging

        tilePathU8 = os.path.splitext(tilePath)[0] + 'U8.tif'
        cmd = ['gdal_translate', '-ot', 'byte', '-scale', tilePath, tilePathU8]
        asp_cmd_utils.executeCommand(cmd, suppressOutput=options.suppressOutput)

    return 0

#------------------------------------------------------------------------------

def main(argsIn):

    relOutputPath = ""
    try:
        # Get the help text from the base C++ tool so we can append it to the python help
        cmd = ['mapproject_single',  '--help']
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        baseHelp, err = p.communicate()

        # Extract the version and help text
        vStart = baseHelp.find('[ASP')
        vEnd   = baseHelp.find(']', vStart)+1
        version = baseHelp[vStart:vEnd]
        baseHelpText = baseHelp[vEnd:]

        # Use parser that ignores unknown options
        usage  = "usage: mapproject [options] <dem> <camera-image> <output>"
        parser = asp_cmd_utils.PassThroughOptionParser(usage=usage, epilog=baseHelpText)

        parser.add_option("--num-processes",  dest="numProcesses", type='int', default=None,
                                              help="Number of processes to use (default program tries to choose best)")

        parser.add_option('--nodes-list',  dest='nodesListPath', default=None,
                                           help='The list of computing nodes, one per line. ' + \
                                                'If not provided, run on the local machine.')

        parser.add_option('--tile-size',  dest='tileSize', default=1024, type='int',
                                           help='Size of square tiles to break up processing in to.')

        # Directory where the job is running
        parser.add_option('--work-dir',  dest='workDir', default=None,
                                         help='Working directory to assemble the tiles in')

        parser.add_option("--suppress-output", action="store_true", default=False,
                                               dest="suppressOutput",  help="Suppress output of sub-calls.")

        # DEBUG options
        parser.add_option("--keep", action="store_true", dest="keep", default=False,
                                    help="Do not delete the temporary files.")
        parser.add_option("--convert-tiles",  action="store_true", dest="convertTiles",
                                              help="Generate a uint8 version of each tile")


        # PRIVATE options
        # These specify the tile location to request, bypassing the need to query mapproject.
        parser.add_option('--pixelStartX', dest='pixelStartX', default=None, type='int',
                                           help=optparse.SUPPRESS_HELP)
        parser.add_option('--pixelStartY', dest='pixelStartY', default=None, type='int',
                                           help=optparse.SUPPRESS_HELP)
        parser.add_option('--pixelStopX',  dest='pixelStopX', default=None, type='int',
                                           help=optparse.SUPPRESS_HELP)
        parser.add_option('--pixelStopY',  dest='pixelStopY', default=None, type='int',
                                           help=optparse.SUPPRESS_HELP)


        # This call handles all the parallel_mapproject specific options.
        (options, args) = parser.parse_args(argsIn)

        # This will parse all the mapproject options.
        requiredList, optionsList = handleArguments(args)

        # Check the required positional arguments.
        if len(requiredList) < 1:
            parser.print_help()
            parser.error("Missing input DEM.\n" );
        if len(requiredList) < 2:
            parser.print_help()
            parser.error("Missing input image.\n" );
        if len(requiredList) < 3:
            parser.print_help()
            parser.error("Missing output filename.\n" );

        # Make sure we have absolute paths here
        options.demPath    = requiredList[0]
        options.imagePath  = requiredList[1]
        if len(requiredList) == 3:
            options.cameraPath = ''
            relOutputPath = requiredList[2]
            options.outputPath = relOutputPath
        else: # == 4
            relOutputPath = requiredList[3]
            options.cameraPath = requiredList[2]
            options.outputPath = relOutputPath

        # Any additional arguments need to be forwarded to the mapproject function
        options.extraArgs = optionsList

    except optparse.OptionError, msg:
        raise Usage(msg)

    startTime = time.time()

    # Determine if this is a main copy or a spawned copy
    spawnedCopy = ( (options.pixelStartX is not None) and (options.pixelStartY is not None) and
                    (options.pixelStopX  is not None) and (options.pixelStopY  is not None) and
                    options.workDir )

    if spawnedCopy: # This copy was spawned to process a single tile
        return writeSingleTile(options) # Just call a function to handle this and then we are done!

    # If the input image is NOT an ISIS image AND we are running on a single machine we can
    #  just use the multi-threading capability of the ordinary mapproject call.
    if (not asp_image_utils.isIsisFile(options.imagePath)) and (not options.nodesListPath):
        cmd = ['mapproject_single',  options.demPath,
                options.imagePath, options.cameraPath, options.outputPath]
        cmd = cmd + options.extraArgs
        print(" ".join(cmd))
        ans = subprocess.call(cmd)
        if ans == 0: print("Wrote: " + relOutputPath)
        return 0

    # Otherwise this is the original called process and there are multiple steps to go through

    # Call mapproject on the input data using subprocess and record output
    cmd = ['mapproject_single',  '--query-projection', options.demPath,
                options.imagePath, options.cameraPath, options.outputPath]
    cmd = cmd + options.extraArgs # Append other options
    print(" ".join(cmd))
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    projectionInfo, err = p.communicate()
    if not options.suppressOutput:
        print projectionInfo


    # Now find the image size in the output
    startPos    = projectionInfo.find('Output image size:')
    widthStart  = projectionInfo.find('width:', startPos)
    heightStart = projectionInfo.find('height:', widthStart)
    heightEnd   = projectionInfo.find(')', heightStart)
    # Extract values
    fullWidth   = int(projectionInfo[widthStart+7  : heightStart-1])
    fullHeight  = int(projectionInfo[heightStart+8 : heightEnd])
    print 'Output image size is ' + str(fullWidth) + ' by ' + str(fullHeight) + ' pixels.'

    # For now we just break up the image into a user-specified tile size (default 1000x1000)
    numTilesX, numTilesY, tileList = generateTileList(fullWidth, fullHeight, options.tileSize)
    numTiles = numTilesX * numTilesY

    print 'Splitting into ' + str(numTilesX) + ' by ' + str(numTilesY) + ' tiles.'
    # If there is only going to be one output tile, just use the non-parallel call
    if (numTilesX*numTilesY == 1):
        cmd = ['mapproject_single',  options.demPath,
                options.imagePath, options.cameraPath, options.outputPath]
        cmd = cmd + options.extraArgs
        print(" ".join(cmd))
        ans = subprocess.call(cmd)
        if ans == 0: print("Wrote: " + relOutputPath)
        return 0


    # Set up output folder
    outputFolder = os.path.dirname(options.outputPath)
    if outputFolder == '':
        outputFolder = './' # Handle calls in same directory
    outputName   = os.path.basename(options.outputPath)
    asp_file_utils.createFolder(outputFolder)

    # Make a temporary directory to store the tiles
    if options.workDir:
        tempFolder = options.workDir
    else: # No folder provided, create a default one
        tempFolder = os.path.join(outputFolder, outputName.replace('.', '_') + '_tiles/')
    asp_file_utils.createFolder(tempFolder)


    # Generate a text file that contains the boundaries for each tile
    argumentFilePath = os.path.join(tempFolder, 'argumentList.txt')
    argumentFile     = file(argumentFilePath, 'w')
    for tile in tileList:
        argumentFile.write(str(tile[0]) + '\t' + str(tile[1]) + '\t' + str(tile[2]) + '\t' + str(tile[3]) + '\n')
    argumentFile.close()


    # Indicate to GNU Parallel that there are multiple tab-seperated variables in the text file we just wrote
    parallelArgs = ['--colsep', "\\t"]

    # Get the number of available nodes and CPUs per node
    numNodes = asp_system_utils.getNumNodesInList(options.nodesListPath)

    # We assume all machines have the same number of CPUs (cores)
    cpusPerNode = asp_system_utils.get_num_cpus()

    # TODO: What is a good number here?
    processesPerCpu = 2

    # Set the optimal number of processes if the user did not specify
    if not options.numProcesses:
        options.numProcesses = numNodes * cpusPerNode * processesPerCpu

    # Note: mapproject can run with multiple threads on non-ISIS data but we don't use that
    #       functionality here since we call mapproject with one tile at a time.

    # No need for more processes than their are tiles!
    if options.numProcesses > numTiles:
        options.numProcesses = numTiles

    # Build the command line that will be passed to GNU parallel
    # - The numbers in braces will receive the values from the text file we wrote earlier
    # - The output path used here does not matter since spawned copies compute the correct tile path.
    python_path = sys.executable # children must use same Python as parent
    # We use below the libexec_path to call python, not the shell script
    mapproject_path = asp_system_utils.libexec_path('mapproject')
    commandList   = [python_path, mapproject_path,
                     '--pixelStartX', '{1}',
                     '--pixelStartY', '{2}',
                     '--pixelStopX',  '{3}',
                     '--pixelStopY',  '{4}',
                     '--threads', '1', # Only use on thread internally, parallel will handle things.
                     '--work-dir', tempFolder,
                     options.demPath,
                     options.imagePath, options.cameraPath,
                     options.outputPath]
    if options.convertTiles:
        commandList = commandList + ['--convert-tiles']
    if options.suppressOutput:
        commandList = commandList + ['--suppress-output']
    commandList   = commandList + options.extraArgs # Append other options
    commandString = asp_cmd_utils.argListToString(commandList)


    # Use GNU parallel call to distribute the work across computers
    # - This call will wait until all processes are finished
    asp_system_utils.runInGnuParallel(options.numProcesses, commandString,
                                      argumentFilePath, parallelArgs,
                                      options.nodesListPath, True)#not options.suppressOutput)


    # Build a gdal VRT file which is composed of all the processed tiles
    vrtPath = os.path.join(tempFolder, 'mosaic.vrt')
    cmd = "gdalbuildvrt -resolution highest " + vrtPath + " " + tempFolder + "*_.tif";
    print cmd
    os.system(cmd)

    # Modify the vrt to append some metadata from the original files

    # Get the metadata
    files = glob.glob(tempFolder + "*_.tif")
    if len(files) == 0:
        raise "No mapprojected tif files were generated"
    args=[files[0]]
    sep = "="
    verbose = False
    gdal_settings = asp_system_utils.run_and_parse_output( "gdalinfo", args, sep, verbose)
    meta = ["  <Metadata>\n"]
    for v in ['CAMERA_MODEL_TYPE', 'BUNDLE_ADJUST_PREFIX', 'DEM_FILE']:
        if v in gdal_settings:
            line = "    <MDI key=\"" + v + "\">" + gdal_settings[v][0] + "</MDI>\n"
            meta.append(line)
    meta.append("  </Metadata>\n")

    # Append the metadata after the first line in the vrt.
    f = open(vrtPath, "r")
    lines = f.readlines()
    f.close()
    lines = [ lines[0] ] + meta + lines[1:len(lines)]
    f = open(vrtPath, "w")
    f.writelines(lines)
    f.close()

    # Convert VRT file to final output file
    cmd = "gdal_translate -co compress=lzw -co bigtiff=yes -co TILED=yes -co INTERLEAVE=BAND -co BLOCKXSIZE=256 -co BLOCKYSIZE=256 " + vrtPath + " " + options.outputPath;
    print cmd
    ans = os.system(cmd)

    # Clean up temporary files
    if not options.keep:
        print("Removing: " + tempFolder)
        asp_file_utils.removeFolderIfExists(tempFolder)

    if ans == 0: print("Wrote: " + relOutputPath)

    endTime = time.time()
    print "Finished in " + str(endTime - startTime) + " seconds."

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
